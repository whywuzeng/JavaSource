spring:
  profiles:
    active: dev
#  redis:
#    host: 192.168.128.129
#    port: 6379
  datasource:
#    url: jdbc:h2:file:~/mydb.h2
#    username: sa
#    password: sa
#    driverClassName: org.h2.Driver
    url: jdbc:mysql://94.191.109.74:3306/qw_db?user=root&password=123456&useUnicode=true&characterEncoding=utf8&autoReconnect=true&failOverReadOnly=false&useSSL=false
    username: root
    password: 123456
    driverClassName: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    # 下面为连接池的补充设置，应用到上面所有数据源中
    # 初始化大小，最小，最大
    initialSize: 1
    minIdle: 3
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 30000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,slf4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 合并多个DruidDataSource的监控数据
    #useGlobalDataSourceStat: true
  jpa:
    database: MYSQL
    show-sql: true
    hibernate:
      ddl-auto: update
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true
        trace: true
  mail:
    password: xxxxxx
    host: smtp.163.com
    username: xxxxxx
    from: xxxxxx@163.com
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
  http:
    multipart:
      max-request-size: 100Mb
      max-file-size: 10Mb
server:
  port: 8081
#文件上传目录(window是d/e/f盘， linux是/)（注意Linux和Windows上的目录结构不同）
#file.uploadFolder=/
file:
  uploadFolder: d://pics//
  #静态资源对外暴露的访问路径(访问图片的路径)
  staticAccessPath: /upload/**


